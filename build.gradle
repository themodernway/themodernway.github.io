/*
 * Copyright (c) 2017, 2018, The Modern Way. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath(group: 'org.ajoberstar', name: 'grgit', version: '1.7.2')
        classpath(group: 'commons-codec', name: 'commons-codec', version: '1.11')
        classpath(group: 'commons-logging', name: 'commons-logging', version: '1.2')
        classpath(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.4')
    }
}

import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.net.InetAddress
import org.ajoberstar.grgit.Grgit

apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'eclipse'

sourceCompatibility = 1.8

targetCompatibility = 1.8

version = '1.2.26'

group = 'com.themodernway'

eclipse {
    classpath { downloadJavadoc = true }
}

def getFilterTokens() {
    [GRADLE_BUILD_ARTIFACT_ID: getProjectArtifactID(), GRADLE_BUILD_PROJECT_TITLE: getProjectTitle(), GRADLE_GIT_HOME_URL: getBuildGITHomeURL(), GRADLE_BUILD_DATE: getBuildDate(), GRADLE_JAVA_VERSION: getJavaVersion(), GRADLE_GIT_COMMIT_HASH: getBuildGITCommitHash(), GRADLE_GIT_COMMIT_USER: getBuildGITCommitUser(), GRADLE_GIT_COMMIT_MESSAGE: getBuildGITCommitMessage(), GRADLE_BUILD_SERVER_HOST: getBuildServerHost(), GRADLE_BUILD_SERVER_BUILD: getBuildServerBuild(), GRADLE_BUILD_MODULE_VERSION: getBuildModuleVersion()]
}

def String getProjectArtifactID() {
    getProjectTitle().toLowerCase()
}

def String getProjectTitle() {
    getProjectCommonName().replaceAll(' ', '.')
}

def String getProjectCommonName() {
    'TheModernWay Github IO'
}

def String getBuildModuleVersion() {
    version
}

def String getBuildDate() {
    (new Date()).toString()
}

def String getBuildServerHost() {
    try {
        InetAddress.getLocalHost().getHostName()
    }
    catch (Exception e) {
        'localhost'
    }
}

def String getJavaVersion() {
    System.getProperty('java.version') ?: 'unknown'
}

def String getBuildUser() {
    System.getProperty('user.name') ?: 'unknown'
}

def String getBuildServerBuild() {
    System.getenv('BUILD_DISPLAY_NAME') ?: "Command line gradle version ${gradle.gradleVersion}"
}

def String getBuildGITHomeURL() {
    'https://github.com/themodernway/' + getProjectArtifactID()
}

def String getBuildGITCommitHash() {
    getBuildGITHomeURL() + '/commit/' + Grgit.open(project.file('.')).head().id
}

def String getBuildGITCommitUser() {
    Grgit.open(project.file('.')).head().committer.email
}

def String getBuildGITCommitMessage() {
    Grgit.open(project.file('.')).head().shortMessage
}

def getBuildCommand() {
    Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c', 'build.bat']: ['/bin/sh', '-c', './build.sh']
}

repositories {
    mavenCentral()
    maven { url "${sonatype_snapshotURL}" }
}

task deleteClient(type: Delete) {
    FileTree tree = fileTree(dir: 'client/dist')
    tree.each { File file ->
        delete(file)
    }
}

task deleteData(type: Delete) {
    FileTree tree = fileTree(dir: 'site/data')
    tree.each { File file ->
        delete(file)
    }
}

task buildClient(dependsOn: deleteClient, type: Exec) {
    workingDir 'client'
    commandLine getBuildCommand()
}

task buildData(dependsOn: deleteData, type: Copy) {
    from 'client/data'
    into 'site/data'
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: getFilterTokens())
}

task publish(dependsOn: [buildClient, buildData], type: Copy) {
    from 'client/dist'
    into 'site'
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: getFilterTokens())
}